<?php

namespace App\Services;

use App\Models\Order;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Exception;
use Mike42\Escpos\PrintConnectors\WindowsPrintConnector;
use Mike42\Escpos\Printer;

class ThermalPrinterService
{
    protected $printerName;
    protected $printerPath;
    protected $printerType;
    protected $debugMode;

    public function __construct()
    {
        $this->printerName = env('THERMAL_PRINTER_NAME', 'GOOJPRT PT-210');
        $this->printerPath = env('THERMAL_PRINTER_PATH', '');
        $this->printerType = env('THERMAL_PRINTER_TYPE', 'bluetooth');
        $this->debugMode = env('THERMAL_PRINTER_DEBUG', false);
    }

    /**
     * Print receipt - supports both traditional and web bluetooth printing
     */
    public function printReceipt(Order $order)
    {
        try {
            Log::info('ThermalPrinter - Print receipt request', [
                'order_id' => $order->id,
                'printer_type' => $this->printerType
            ]);

            // Generate receipt content
            $receiptContent = $this->generateReceiptContent($order);

            // Save receipt for web bluetooth printing
            $this->saveReceiptForWebPrinting($order, $receiptContent);

            // Try traditional printing if configured
            if ($this->printerType === 'windows' && !empty($this->printerPath)) {
                return $this->printTraditional($receiptContent);
            }

            // For bluetooth/web printing, we return true and let the frontend handle it
            Log::info('ThermalPrinter - Receipt prepared for web bluetooth printing', [
                'order_id' => $order->id
            ]);

            return true;

        } catch (Exception $e) {
            Log::error('ThermalPrinter - Receipt printing failed', [
                'order_id' => $order->id,
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }

    /**
     * Generate formatted receipt content
     */
    private function generateReceiptContent(Order $order)
    {
        $content = str_repeat('=', 32) . "\n";
        $content .= $this->centerText('RECEIPT', 32) . "\n";
        $content .= str_repeat('=', 32) . "\n";
        $content .= "Date: " . $order->created_at->format('Y-m-d H:i:s') . "\n";
        $content .= "Order: #" . ($order->order_number ?? str_pad($order->id, 4, '0', STR_PAD_LEFT)) . "\n";
        $content .= "Type: " . ucfirst($order->order_type ?? 'dine-in') . "\n";
        
        if ($order->customer_name) {
            $content .= "Customer: " . $order->customer_name . "\n";
        }
        
        $content .= "\n";

        // Order items
        foreach ($order->orderItems as $item) {
            $name = $item->name ?? ($item->menuItem ? $item->menuItem->name : 'Unknown Item');
            $quantity = $item->quantity;
            $unitPrice = $item->unit_price ?? ($item->menuItem ? $item->menuItem->price : 0);
            $totalPrice = $item->total_price ?? ($unitPrice * $quantity);

            $content .= sprintf("%-20s %2dx\n", $this->truncateText($name, 20), $quantity);
            $content .= sprintf("%20s $%6.2f\n", "@$" . number_format($unitPrice, 2), $totalPrice);
        }

        $content .= str_repeat('-', 32) . "\n";
        $content .= sprintf("%-20s $%6.2f\n", "Subtotal:", $order->subtotal ?? $order->total_amount);
        
        if ($order->tax_amount && $order->tax_amount > 0) {
            $content .= sprintf("%-20s $%6.2f\n", "Tax:", $order->tax_amount);
        }
        
        $content .= sprintf("%-20s $%6.2f\n", "TOTAL:", $order->total_amount);

        if ($order->cash_amount && $order->cash_amount > 0) {
            $content .= sprintf("%-20s $%6.2f\n", "Cash Received:", $order->cash_amount);
            $content .= sprintf("%-20s $%6.2f\n", "Change:", $order->change_amount ?? 0);
        }

        $content .= "\n";
        
        if ($order->special_instructions) {
            $content .= "Special Instructions:\n";
            $content .= wordwrap($order->special_instructions, 32) . "\n\n";
        }

        $content .= $this->centerText('Thank you!', 32) . "\n";
        $content .= str_repeat('=', 32) . "\n";

        return $content;
    }

    /**
     * Save receipt content for web bluetooth printing
     */
    private function saveReceiptForWebPrinting(Order $order, string $content)
    {
        try {
            $filename = "receipt_order_{$order->id}_" . time() . ".txt";
            Storage::disk('local')->put("thermal_receipts/{$filename}", $content);
            
            // Also save as latest for easy access
            Storage::disk('local')->put("thermal_receipts/latest_receipt.txt", $content);
            
            Log::info('ThermalPrinter - Receipt saved for web printing', [
                'order_id' => $order->id,
                'filename' => $filename
            ]);

        } catch (Exception $e) {
            Log::error('ThermalPrinter - Failed to save receipt', [
                'order_id' => $order->id,
                'error' => $e->getMessage()
            ]);
        }
    }

    /**
     * Traditional Windows printer method (fallback)
     */
    private function printTraditional(string $content)
    {
        try {
            if (empty($this->printerPath)) {
                throw new Exception('Printer path not configured');
            }

            $connector = new WindowsPrintConnector($this->printerPath);
            $printer = new Printer($connector);
            
            $printer->text($content);
            $printer->feed(3);
            $printer->cut();
            $printer->close();

            Log::info('ThermalPrinter - Traditional printing successful');
            return true;

        } catch (Exception $e) {
            Log::error('ThermalPrinter - Traditional printing failed', [
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }

    /**
     * Test printer functionality
     */
    public function testPrinter()
    {
        try {
            Log::info('ThermalPrinter - Test print requested');

            $testContent = str_repeat('=', 32) . "\n";
            $testContent .= $this->centerText('TEST PRINT', 32) . "\n";
            $testContent .= str_repeat('=', 32) . "\n";
            $testContent .= "Date: " . now()->format('Y-m-d H:i:s') . "\n";
            $testContent .= "Printer: " . $this->printerName . "\n";
            $testContent .= "Type: " . $this->printerType . "\n";
            $testContent .= "\n";
            $testContent .= "Printer test successful!\n";
            $testContent .= "\n";
            $testContent .= str_repeat('=', 32) . "\n";

            // Save test receipt for web printing
            Storage::disk('local')->put("thermal_receipts/test_receipt.txt", $testContent);

            if ($this->printerType === 'windows' && !empty($this->printerPath)) {
                return $this->printTraditional($testContent);
            }

            Log::info('ThermalPrinter - Test receipt prepared for web printing');
            return true;

        } catch (Exception $e) {
            Log::error('ThermalPrinter - Test print failed', [
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }

    /**
     * Get connection information
     */
    public function getConnectionInfo()
    {
        return [
            'printer_name' => $this->printerName,
            'printer_type' => $this->printerType,
            'printer_path' => $this->printerPath,
            'debug_mode' => $this->debugMode,
            'web_bluetooth_enabled' => true,
            'storage_path' => storage_path('app/thermal_receipts'),
            'supported_models' => [
                'GOOJPRT PT-210',
                'Generic ESC/POS Thermal Printer'
            ]
        ];
    }

    /**
     * Get latest receipt content for web printing
     */
    public function getLatestReceiptContent()
    {
        try {
            if (Storage::disk('local')->exists('thermal_receipts/latest_receipt.txt')) {
                return Storage::disk('local')->get('thermal_receipts/latest_receipt.txt');
            }
            return null;
        } catch (Exception $e) {
            Log::error('ThermalPrinter - Failed to get latest receipt', [
                'error' => $e->getMessage()
            ]);
            return null;
        }
    }

    /**
     * Get receipt content for specific order
     */
    public function getReceiptContent($orderId)
    {
        try {
            $files = Storage::disk('local')->files('thermal_receipts');
            $receiptFile = null;

            foreach ($files as $file) {
                if (strpos($file, "receipt_order_{$orderId}_") !== false) {
                    $receiptFile = $file;
                    break;
                }
            }

            if ($receiptFile) {
                return Storage::disk('local')->get($receiptFile);
            }

            return null;
        } catch (Exception $e) {
            Log::error('ThermalPrinter - Failed to get receipt content', [
                'order_id' => $orderId,
                'error' => $e->getMessage()
            ]);
            return null;
        }
    }

    /**
     * Helper method to center text
     */
    private function centerText($text, $width)
    {
        $padding = ($width - strlen($text)) / 2;
        return str_repeat(' ', floor($padding)) . $text . str_repeat(' ', ceil($padding));
    }

    /**
     * Helper method to truncate text
     */
    private function truncateText($text, $maxLength)
    {
        return strlen($text) > $maxLength ? substr($text, 0, $maxLength - 3) . '...' : $text;
    }
}